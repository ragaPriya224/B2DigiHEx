drawbacks :
int []foodArray = new int[1000];

1. homogenous data elements 
2. size is 10. which mean size is fixed.
3. no readymade ds

Student[] s = new Student[1000];
1. fixed size
2. Homogenous data students 
s[1] = new Customer[];

Object[] a = new Object[1000];
a[0] = new Student[];
a[1] = new Customer[];



int[] a = new int[5]; //size is fixed
		a[2] = 3; //no underlying DS is present.
//		a[0] = "89"; //heterogenous not allowed 

solution is collection concept
-=-----------------------------------
1. Growable in size
		2. heterogenous datas allowed 
//		3.  underlying DS is present.
//		4. memory too good, performance not upto mark
//		5. can't hold primitive data types


 Collection -> represent group of individual object in a single entity. 
 
 Collection Framework

  contains several classes, and interfaces ,  which can be used for represent a group of individual objects as a single entity
   old concept, used in another languages
   
 KEY Interface ->  9 
---------------
1. collection(I)
2. List(I) 
3. set(I)
4. sortedSet(I)
5. navigableSet(I)
6. queue(I)
7. map (I)
8. sortedMap(I)
9. navigableMap(I)

// dress shop -> unique items
// grocery shop -> duplicate items
// hotel -> burger & coke 
// hotel -> menu card-> price and food item

1. collection (I)

Root interface
defines most common methods for any collection object
there is no concrete class that implements the collection interface

2. List I
-> dup ok, same order of insertion 
-> child of collection (I)


Collection 
|
List
|
ArrayList   LinkedList Vector Stack (old/legacy classes )


3.set (I)

-> dup not ok, insertion order will not be maintained 
-> dress / jewellery example 

Collection 
|
Set
|
HashSet LinkedHashSet

4.  sortedSet(I)


Collection 
|
Set
|
SortedSet
|

treeset 

-> duplicates not allowed
-> inserted according to some sorting order
 
 
 5. navigableSet(I)


Collection 
|
Set
|
SortedSet
|
navigableset
|
treeset 

-> defines several methods for navigation purposes

6. queue
 represent group of objects before processing 
 FIFO
 priority blocking
 
       all above, representing group of individual obbjects
key , value pair 
a -> 21
b -> 35

7. map(I)
-> duplicate key is not allowed 
-> not child interface of collection 

map -> hashtable -> properties    -> legacy class
	  hashmap -> LinkedHashMap
 	  weakhashmap,
  	  identity hashmap 

8. sorted map(I)
represent -> keyvalue pair according to some sorting order

map -> sortedmap -> navigable map -> treemap 

9. navigable map (I)
1. child of sorted map
2. several utility methods for navigation purpose
_______________________________________________________


    
 
